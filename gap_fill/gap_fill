"""
Gap filling tool
 * Relational fills for the markerset.


 There are two relational fill definitions for the markers. Various combinations of using the
 first, second or both in multiple passes can be invoked. It works on the currently selected
 trajectories.
"""
import sys
import os
import inspect
import importlib

import qtm

this_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
if this_dir not in sys.path:
    sys.path.append(this_dir)

import helpers.menu_tools
import helpers.traj

importlib.reload(helpers.menu_tools)
importlib.reload(helpers.traj)

from helpers.menu_tools import add_menu_item, add_command
from helpers.traj import get_default_markerset_marker, get_selected_markerset_marker

# Hardcoded relationships for all markers using a lowerbody modell
# Two of them is usually enough, the first is a 
# sensible set of relations, the second is CRAZY :-)


Arel = []
Arel.append({

        # "filled_marker":("origin", "line", "plane"),
    
        # Hip
        "hip_top_right":("SIPS_right","SIAS_right","hip_top_left"),
        "hip_top_left":("SIPS_left","SIAS_left","hip_top_right"),
        "SIAS_left":("SIPS_left","SIAS_right","SIPS_right"),
        "SIAS_right":("SIPS_right","SIAS_left","SIPS_left"),
        "SIPS_left":("SIPS_right","SIAS_left","SIAS_right"),
        "SIPS_right":("SIPS_left","SIAS_right","SIAS_left"),

        # Left Leg
        "cluster_femur_left_1":("cluster_femur_left_4","cluster_femur_left_3","cluster_femur_left_2"),
        "cluster_femur_left_2":("cluster_femur_left_4","cluster_femur_left_3","cluster_femur_left_1"),
        "cluster_femur_left_3":("cluster_femur_left_2","cluster_femur_left_1","cluster_femur_left_4"),
        "cluster_femur_left_4":("cluster_femur_left_2","cluster_femur_left_1","cluster_femur_left_3"),
        "epi_lat_left":("cluster_femur_left_4","cluster_femur_left_3","epi_med_left"),
        "epi_med_left":("cluster_femur_left_4","cluster_femur_left_3","epi_lat_left"),
        "cluster_tibia_left_1":("cluster_tibia_left_4","cluster_tibia_left_3","cluster_tibia_left_2"),
        "cluster_tibia_left_2":("cluster_tibia_left_4","cluster_tibia_left_3","cluster_tibia_left_1"),
        "cluster_tibia_left_3":("cluster_tibia_left_2","cluster_tibia_left_1","cluster_tibia_left_4"),
        "cluster_tibia_left_4":("cluster_tibia_left_2","cluster_tibia_left_1","cluster_tibia_left_3"),
        "mal_lat_left":("calc_lat_left","forefoot_lat_left","mal_med_left"),
        "mal_med_left":("calc_med_left","forefoot_med_left","mal_lat_left"),

        # Distance between left foot markers is not constant
            # Use with caution
        # Left Foot
        #"calc_back_left":("calc_lat_left","forefoot_lat_left","calc_med_left"),
        #"calc_lat_left":("calc_back_left","forefoot_lat_left","calc_med_left"),
        #"calc_med_left":("calc_back_left","forefoot_med_left","calc_lat_left"),
        #"forefoot_med_left":("calc_back_left","toe_left","forefoot_lat_left"),
        #"forefoot_lat_left":("calc_back_left","toe_left","forefoot_med_left"),
        #"toe_left":("calc_back_left","forefoot_med_left","forefoot_lat_left"),

        # Right Leg
        "cluster_femur_right_1":("cluster_femur_right_4","cluster_femur_right_3","cluster_femur_right_2"),
        "cluster_femur_right_2":("cluster_femur_right_4","cluster_femur_right_3","cluster_femur_right_1"),
        "cluster_femur_right_3":("cluster_femur_right_2","cluster_femur_right_1","cluster_femur_right_4"),
        "cluster_femur_right_4":("cluster_femur_right_2","cluster_femur_right_1","cluster_femur_right_3"),
        "epi_lat_right":("cluster_femur_right_4","cluster_femur_right_3","epi_med_right"),
        "epi_med_right":("cluster_femur_right_4","cluster_femur_right_3","epi_lat_right"),
        "cluster_tibia_right_1":("cluster_tibia_right_4","cluster_tibia_right_3","cluster_tibia_right_2"),
        "cluster_tibia_right_2":("cluster_tibia_right_4","cluster_tibia_right_3","cluster_tibia_right_2"),
        "cluster_tibia_right_3":("cluster_tibia_right_2","cluster_tibia_right_1","cluster_tibia_right_4"),
        "cluster_tibia_right_4":("cluster_tibia_right_2","cluster_tibia_right_1","cluster_tibia_right_3"),
        "mal_lat_right":("calc_lat_right","forefoot_lat_right","mal_med_right"),
        "mal_med_right":("calc_med_right","forefoot_med_right","mal_lat_right"),

        # Distance between left foot markers is not constant
            # Use with caution
        # Right Foot
        #"calc_back_right":("calc_lat_right","forefoot_lat_right","calc_med_right"),
        #"calc_lat_right":("calc_back_right","forefoot_lat_right","calc_med_right"),
        #"calc_med_right":("calc_back_right","forefoot_med_right","calc_lat_right"),
        #"forefoot_med_right":("calc_back_right","toe_right","forefoot_lat_right"),
        #"forefoot_lat_right":("calc_back_right","toe_right","forefoot_med_right"),
        #"toe_right":("calc_back_right","forefoot_med_right","forefoot_lat_right")
        })

Arel.append({
        # Hip
        "hip_top_right":("SIPS_left","SIAS_left","hip_top_left"),
        "hip_top_left":("SIPS_right","SIAS_right","hip_top_right"),
        "SIAS_left":("SIPS_right","SIAS_right","SIPS_left"),
        "SIAS_right":("SIPS_left","SIAS_left","SIPS_right"),
        "SIPS_left":("SIPS_right","SIAS_right","SIAS_left"),
        "SIPS_right":("SIPS_left","SIAS_left","SIAS_right"),

        # Left Leg
        "cluster_femur_left_1":("cluster_femur_left_2","cluster_femur_left_3","cluster_femur_left_4"),
        "cluster_femur_left_2":("cluster_femur_left_4","cluster_femur_left_1","cluster_femur_left_3"),
        "cluster_femur_left_3":("cluster_femur_left_4","cluster_femur_left_1","cluster_femur_left_2"),
        "cluster_femur_left_4":("cluster_femur_left_2","cluster_femur_left_1","cluster_femur_left_3"),
        "epi_lat_left":("cluster_tibia_left_1","cluster_femur_left_3","epi_med_left"),
        "epi_med_left":("cluster_tibia_left_1","cluster_femur_left_3","epi_lat_left"),
        "cluster_tibia_left_1":("cluster_tibia_left_2","cluster_tibia_left_3","cluster_tibia_left_4"),
        "cluster_tibia_left_2":("cluster_tibia_left_4","cluster_tibia_left_1","cluster_tibia_left_3"),
        "cluster_tibia_left_3":("cluster_tibia_left_4","cluster_tibia_left_1","cluster_tibia_left_2"),
        "cluster_tibia_left_4":("cluster_tibia_left_2","cluster_tibia_left_3","cluster_tibia_left_1"),
        "mal_lat_left":("cluster_tibia_left_4","cluster_tibia_left_3","mal_med_left"),
        "mal_med_left":("cluster_tibia_left_4","cluster_tibia_left_3","mal_lat_left"),


        # Right Leg
        "cluster_femur_right_1":("cluster_femur_right_2","cluster_femur_right_3","cluster_femur_right_4"),
        "cluster_femur_right_2":("cluster_femur_right_4","cluster_femur_right_1","cluster_femur_right_3"),
        "cluster_femur_right_3":("cluster_femur_right_4","cluster_femur_right_1","cluster_femur_right_2"),
        "cluster_femur_right_4":("cluster_femur_right_2","cluster_femur_right_1","cluster_femur_right_3"),
        "epi_lat_right":("cluster_tibia_right_1","cluster_femur_right_3","epi_med_right"),
        "epi_med_right":("cluster_tibia_right_1","cluster_femur_right_3","epi_lat_right"),
        "cluster_tibia_right_1":("cluster_tibia_right_2","cluster_tibia_right_3","cluster_tibia_right_4"),
        "cluster_tibia_right_2":("cluster_tibia_right_4","cluster_tibia_right_1","cluster_tibia_right_3"),
        "cluster_tibia_right_3":("cluster_tibia_right_4","cluster_tibia_right_1","cluster_tibia_right_2"),
        "cluster_tibia_right_4":("cluster_tibia_right_2","cluster_tibia_right_3","cluster_tibia_right_1"),
        "mal_lat_right":("cluster_tibia_right_4","cluster_tibia_right_3","mal_med_right"),
        "mal_med_right":("cluster_tibia_right_4","cluster_tibia_right_3","mal_lat_right"),
        })


def _print_gaps(mname):
    """
    Print All the gaps for the markerset where a relational fill is available
    """
    # Does not print gaps at the beginning or at the end.
    nogaps = True
    for marker in Arel[0]:
        (oname, lname, pname) = Arel[0][marker]
        m_id = qtm.data.object.trajectory.find_trajectory(marker)
        if m_id == None:
            # print(f"Bad marker name: {marker}")
            pass
        else:
            gaps = qtm.data.series._3d.get_gap_ranges(m_id)
            for g in gaps:
                start = g["start"]
                end = g["end"]
                print(f"Marker:{marker} start:{start} end:{end}")
                nogaps = False
    if nogaps:
        print(f"No Gaps!")

                    
def _doFillGapsSelected(rels):
    # Get the current marker selections from the GUI
    selections = qtm.gui.selection.get_selections()
    for s in selections:
        m_id = s["id"]  # The ID of the selected marker
        fullmarker = qtm.data.object.trajectory.get_label(m_id)
        marker = fullmarker
        
        # Check if the marker is in the relationships dictionary
        if marker in rels:
            (oname, lname, pname) = rels[marker]
            o_id = qtm.data.object.trajectory.find_trajectory(oname)
            l_id = qtm.data.object.trajectory.find_trajectory(lname)
            p_id = qtm.data.object.trajectory.find_trajectory(pname)

            # Find the gaps in the marker trajectory
            gaps = qtm.data.series._3d.get_gap_ranges(m_id)
            frame = qtm.data.series._3d.get_sample_range(m_id)
            if len(gaps) > 0:
                for g in gaps:
                    start = g["start"]
                    end = g["end"]
                    try:
                        # Fill the trajectory using relational method based on origin, line, and plane
                        qtm.data.object.trajectory.fill_trajectory(m_id, "relational", {"start": start, "end": end}, {"origin": o_id, "line": l_id, "plane": p_id})
                    except RuntimeError:
                        print(f"  {marker} failed at frame {start}")
                        pass
            else:
                # If there are no gaps, check the beginning of the recording. 
                if frame["start"] > 0:
                    points = {'start': 0, 'end': frame["start"] - 1}
                    for p in points:
                        start = points["start"]
                        end = points["end"]
                        try:
                            # Fill the trajectory using relational method.
                            qtm.data.object.trajectory.fill_trajectory(m_id, "relational", {"start": start, "end": end}, {"origin": o_id, "line": l_id, "plane": p_id})
                        except RuntimeError:
                            print(f"  {marker} failed at frame {start}")
                            pass
                else:
                    # Checks the end of the recording assuming that the origin marker is seen at the last frame.
                    long = qtm.data.series._3d.get_sample_range(o_id)
                    if frame["end"] < long["end"]:
                        points = {'start': frame["end"], 'end': long["end"]}
                        for p in points:
                            start = points["start"]
                            end = points["end"]
                            try:
                                # Fill the trajectory using relational method.
                                qtm.data.object.trajectory.fill_trajectory(m_id, "relational", {"start": start, "end": end}, {"origin": o_id, "line": l_id, "plane": p_id})
                            except RuntimeError:
                                print(f"  {marker} failed at frame {start}")
                                pass
                    else:
                        print("No gaps to process.")
        else:
            print(f"Marker relationship not found for {marker}.")



# - - - - - - - - - - - - - - - - - -
# ////////   P U B L I C   ////////
# - - - - - - - - - - - - - - - -
# region [ COLLAPSE / EXPAND ]



def FillGapsSelected():
    if qtm.gui.selection.get_selection_count() == 0:
        print(f"Select which markers to fill.")
        return 
    strPass = "First Pass"
    i = 1
    for r in Arel:
        print(f"# Definition {i}: {strPass}")
        _doFillGapsSelected(r)
        i = i+1
    strPass = "Second Pass"
    i = 1
    for r in Arel:
        print(f"# Definition {i}: {strPass}")
        _doFillGapsSelected(r)
        i = i+1
    print("-----Done-----")

def FillGapsSelected1():
    _doFillGapsSelected(Arel[0])
def FillGapsSelected2():
    _doFillGapsSelected(Arel[1])

def PrintGaps():
    markerset, marker = get_default_markerset_marker()
    if markerset:
        _print_gaps(markerset)
menu_priority = 1

def add_menu():

    add_command("gap_fill_relational_selected", FillGapsSelected)
    add_command("gap_fill_relational_definition1", FillGapsSelected1)
    add_command("gap_fill_relational_definition2", FillGapsSelected2)
    add_command("gap_fill_print_all_gaps", PrintGaps)
    add_command("gap_fill_help", lambda:(print(__doc__)))

    menu_id = qtm.gui.insert_menu_submenu(None,"GapFill")
    add_menu_item(menu_id, "Help", "gap_fill_help")
    qtm.gui.insert_menu_separator(menu_id)    
    add_menu_item(menu_id, "Relational Gap Fill - Multi Pass", "gap_fill_relational_selected")
    add_menu_item(menu_id, "Relational Gap Fill - One Pass Definition 1", "gap_fill_relational_definition1")
    add_menu_item(menu_id, "Relational Gap Fill - One Pass Definition 2", "gap_fill_relational_definition2")
    qtm.gui.insert_menu_separator(menu_id)
    add_menu_item(menu_id, "Print All Gaps", "gap_fill_print_all_gaps")
# endregion

if __name__ == "__main__":
    add_menu()
